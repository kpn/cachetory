[project]
requires-python = ">=3.8"

[tool.poetry]
authors = [
    "Pavel Perestoronin <pavel.perestoronin@kpn.com>",
]
description = "Caching library with support for multiple cache backends"
keywords = ["cache"]
license = "Apache-2.0"
name = "cachetory"
readme = "README.md"
repository = "https://github.com/kpn/cachetory"
version = "0.0.0"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
]

[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.dependencies]
django = {version = "^4.0.0", optional = true}
ormsgpack = {version = "^1.2.6", optional = true, markers = "platform_python_implementation == 'CPython'"}
pydantic = "<3.0.0"
python = "^3.8.0"
redis = {version = "^4.4.2 || ^5.0.0", optional = true}
typing-extensions = "^4.4.0"
zstd = {version = "^1.5.2.6", optional = true}

[tool.poetry.extras]
django = ["django"]
ormsgpack = ["ormsgpack"]
redis = ["redis"]
zstd = ["zstd"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
freezegun = "1.2.2"
mypy = "1.6.0"
pytest = "7.4.2"
pytest-asyncio = "0.21.1"
pytest-cov = "4.1.0"
ruff = "0.1.0"
types-redis = "^4.4.0.4"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-material = "9.4.6"
pillow = "10.1.0"
cairosvg = "2.7.1"
mkdocs-git-revision-date-localized-plugin = "1.2.1"
mkdocstrings = { version = "0.23.0", extras = ["python"] }
mkdocs-autorefs = "0.5.0"
black = "23.9.1"

[tool.black]
line-length = 120
target_version = ["py38", "py39", "py310", "py311"]

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "A",
    "ANN",
    "B",
    "C4",
    "COM",
    "D",
    "E",
    "F",
    "I",
    "N",
    "PIE",
    "PT",
    "PTH",
    "RET",
    "SIM",
    "T20",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "ANN001",  # TODO: fix and enable
    "ANN101",
    "ANN102",
    "ANN401",
    "D100",  # TODO: fix and enable
    "D102",  # TODO: fix and enable
    "D103",  # TODO: fix and enable
    "D104",  # TODO: fix and enable
    "D105",  # TODO: fix and enable
    "D107",  # TODO: fix and enable
    "D202",
    "D203",  # alternative of D211
    "D212",  # alternative of D213
    "D406",
    "D407",
    "D417",  # TODO: fix and enable
    "PT001",
    "PT011",
    "PT013",
    "RET505",
    "TRY003",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D101", "D102", "D106"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.mypy]
no_implicit_optional = true
pretty = true
check_untyped_defs = true

[tool.pytest.ini_options]
addopts = "--cov=./ --cov-report=xml"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["cachetory"]
branch = true
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "except ImportError",
    "if TYPE_CHECKING:",
    "@overload",
]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "default-unprefixed"
style = "pep440"
strict = true
latest-tag = true
